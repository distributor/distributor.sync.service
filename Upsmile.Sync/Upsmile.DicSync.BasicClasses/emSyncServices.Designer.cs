//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Devart Entity Developer tool using Entity Framework EntityObject template.
// Code is generated on: 19.09.2012 18:46:53
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Data.EntityClient;
using System.ComponentModel;
using System.Collections.Generic;
using System.Xml.Serialization;
using System.Runtime.Serialization;
using System.Data;
using System.Linq;
using System.Data.Common;

[assembly: EdmSchemaAttribute()]
#region EDM Relationship Metadata

[assembly: EdmRelationshipAttribute("SyncServicesModel", "DICPLACE_ElsysSyncServic", "DICPLACE", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(SyncServicesModel.DICPLACE), "ElsysSyncServics", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(SyncServicesModel.ElsysSyncServic), true)]
[assembly: EdmRelationshipAttribute("SyncServicesModel", "DICPLACE_DICPLACE", "DICPLACE_PARENTID", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(SyncServicesModel.DICPLACE), "DICPLACEs_PARENTID", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(SyncServicesModel.DICPLACE), true)]
[assembly: EdmRelationshipAttribute("SyncServicesModel", "ElsysType_LinkSyncServicesEntity", "ElsysType", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(SyncServicesModel.ElsysType), "LinkSyncServicesEntities", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(SyncServicesModel.LinkSyncServicesEntity), true)]
[assembly: EdmRelationshipAttribute("SyncServicesModel", "ElsysSyncServic_LinkSyncServicesEntity", "ElsysSyncServic", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(SyncServicesModel.ElsysSyncServic), "LinkSyncServicesEntities", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(SyncServicesModel.LinkSyncServicesEntity), true)]

#endregion

namespace SyncServicesModel
{

    #region SyncServicesEntities

    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    public partial class SyncServicesEntities : ObjectContext
    {
        #region Constructors

        /// <summary>
        /// Initialize a new SyncServicesEntities object.
        /// </summary>
        public SyncServicesEntities() : 
                base(@"name=emSyncServicesConnectionString", "SyncServicesEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }

        /// <summary>
        /// Initializes a new SyncServicesEntities object using the connection string found in the 'SyncServicesEntities' section of the application configuration file.
        /// </summary>
        public SyncServicesEntities(string connectionString) : 
                base(connectionString, "SyncServicesEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }

        /// <summary>
        /// Initialize a new SyncServicesEntities object.
        /// </summary>
        public SyncServicesEntities(EntityConnection connection) : base(connection, "SyncServicesEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }

        #endregion

        #region Partial Methods

        partial void OnContextCreated();

        #endregion

        #region ObjectSet Properties

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<ElsysType> ElsysTypes
        {
            get
            {
                if ((_ElsysTypes == null))
                {
                    _ElsysTypes = base.CreateObjectSet<ElsysType>("ElsysTypes");
                }
                return _ElsysTypes;
            }
        }
        private ObjectSet<ElsysType> _ElsysTypes;

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<LinkSyncServicesEntity> Linksyncservicesentities
        {
            get
            {
                if ((_Linksyncservicesentities == null))
                {
                    _Linksyncservicesentities = base.CreateObjectSet<LinkSyncServicesEntity>("Linksyncservicesentities");
                }
                return _Linksyncservicesentities;
            }
        }
        private ObjectSet<LinkSyncServicesEntity> _Linksyncservicesentities;

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<VLinkSyncSerEntNeeded> VLinkSyncSerEntNeededs
        {
            get
            {
                if ((_VLinkSyncSerEntNeededs == null))
                {
                    _VLinkSyncSerEntNeededs = base.CreateObjectSet<VLinkSyncSerEntNeeded>("VLinkSyncSerEntNeededs");
                }
                return _VLinkSyncSerEntNeededs;
            }
        }
        private ObjectSet<VLinkSyncSerEntNeeded> _VLinkSyncSerEntNeededs;

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<ElsysSyncServic> ElsysSyncServics
        {
            get
            {
                if ((_ElsysSyncServics == null))
                {
                    _ElsysSyncServics = base.CreateObjectSet<ElsysSyncServic>("ElsysSyncServics");
                }
                return _ElsysSyncServics;
            }
        }
        private ObjectSet<ElsysSyncServic> _ElsysSyncServics;

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<DICPLACE> DICPLACEs
        {
            get
            {
                if ((_DICPLACEs == null))
                {
                    _DICPLACEs = base.CreateObjectSet<DICPLACE>("DICPLACEs");
                }
                return _DICPLACEs;
            }
        }
        private ObjectSet<DICPLACE> _DICPLACEs;

        #endregion
        #region AddTo Methods

        /// <summary>
        /// Deprecated Method for adding a new object to the ElsysTypes EntitySet.
        /// </summary>
        public void AddToElsysTypes(ElsysType elsysType)
        {
            base.AddObject("ElsysTypes", elsysType);
        }

        /// <summary>
        /// Deprecated Method for adding a new object to the Linksyncservicesentities EntitySet.
        /// </summary>
        public void AddToLinksyncservicesentities(LinkSyncServicesEntity linkSyncServicesEntity)
        {
            base.AddObject("Linksyncservicesentities", linkSyncServicesEntity);
        }

        /// <summary>
        /// Deprecated Method for adding a new object to the VLinkSyncSerEntNeededs EntitySet.
        /// </summary>
        public void AddToVLinkSyncSerEntNeededs(VLinkSyncSerEntNeeded vLinkSyncSerEntNeeded)
        {
            base.AddObject("VLinkSyncSerEntNeededs", vLinkSyncSerEntNeeded);
        }

        /// <summary>
        /// Deprecated Method for adding a new object to the ElsysSyncServics EntitySet.
        /// </summary>
        public void AddToElsysSyncServics(ElsysSyncServic elsysSyncServic)
        {
            base.AddObject("ElsysSyncServics", elsysSyncServic);
        }

        /// <summary>
        /// Deprecated Method for adding a new object to the DICPLACEs EntitySet.
        /// </summary>
        public void AddToDICPLACEs(DICPLACE dICPLACE)
        {
            base.AddObject("DICPLACEs", dICPLACE);
        }

        #endregion

        #region Methods

    
        /// <summary>
        /// There are no comments for GET_SYSDATE in the schema.
        /// </summary>
        public global::System.Nullable<System.DateTime> GET_SYSDATE ()
        {
            if (this.Connection.State != System.Data.ConnectionState.Open)
              this.Connection.Open();
            System.Data.EntityClient.EntityCommand command = new System.Data.EntityClient.EntityCommand();
            if(this.CommandTimeout.HasValue)
              command.CommandTimeout = this.CommandTimeout.Value;
            command.CommandType = System.Data.CommandType.StoredProcedure;
            command.CommandText = @"SyncServicesEntities.GET_SYSDATE";
            command.Connection = (System.Data.EntityClient.EntityConnection)this.Connection;
            global::System.Nullable<System.DateTime> result = (global::System.Nullable<System.DateTime>)command.ExecuteScalar();
            return result;
        }

    
        /// <summary>
        /// There are no comments for SET_LINK_SYNC_SERV_CALL_DATA in the schema.
        /// </summary>
        public void SET_LINK_SYNC_SERV_CALL_DATA (global::System.Nullable<decimal> P_LINK_SYNC_SERV_ENT_ID, global::System.Nullable<System.DateTime> P_SYNC_TIME)
        {
            if (this.Connection.State != System.Data.ConnectionState.Open)
              this.Connection.Open();
            System.Data.EntityClient.EntityCommand command = new System.Data.EntityClient.EntityCommand();
            if(this.CommandTimeout.HasValue)
              command.CommandTimeout = this.CommandTimeout.Value;
            command.CommandType = System.Data.CommandType.StoredProcedure;
            command.CommandText = @"SyncServicesEntities.SET_LINK_SYNC_SERV_CALL_DATA";
            command.Connection = (System.Data.EntityClient.EntityConnection)this.Connection;
            EntityParameter P_LINK_SYNC_SERV_ENT_IDParameter = new EntityParameter("P_LINK_SYNC_SERV_ENT_ID", System.Data.DbType.Decimal);
            if (P_LINK_SYNC_SERV_ENT_ID.HasValue)
                P_LINK_SYNC_SERV_ENT_IDParameter.Value = P_LINK_SYNC_SERV_ENT_ID;
            command.Parameters.Add(P_LINK_SYNC_SERV_ENT_IDParameter);
            EntityParameter P_SYNC_TIMEParameter = new EntityParameter("P_SYNC_TIME", System.Data.DbType.DateTime);
            if (P_SYNC_TIME.HasValue)
                P_SYNC_TIMEParameter.Value = P_SYNC_TIME;
            command.Parameters.Add(P_SYNC_TIMEParameter);
            command.ExecuteNonQuery();
        }

    
        /// <summary>
        /// There are no comments for UPDATE_ENTITY_DATA in the schema.
        /// </summary>
        public global::System.Nullable<decimal> UPDATE_ENTITY_DATA (string P_IN_XML_DATA, global::System.Nullable<double> P_ELSYS_TYPE_ID, ref string P_ERROR_MSG)
        {
            if (this.Connection.State != System.Data.ConnectionState.Open)
              this.Connection.Open();
            System.Data.EntityClient.EntityCommand command = new System.Data.EntityClient.EntityCommand();
            if(this.CommandTimeout.HasValue)
              command.CommandTimeout = this.CommandTimeout.Value;
            command.CommandType = System.Data.CommandType.StoredProcedure;
            command.CommandText = @"SyncServicesEntities.UPDATE_ENTITY_DATA";
            command.Connection = (System.Data.EntityClient.EntityConnection)this.Connection;
            EntityParameter P_IN_XML_DATAParameter = new EntityParameter("P_IN_XML_DATA", System.Data.DbType.String);
            if (P_IN_XML_DATA != null)
                P_IN_XML_DATAParameter.Value = P_IN_XML_DATA;
            command.Parameters.Add(P_IN_XML_DATAParameter);
            EntityParameter P_ELSYS_TYPE_IDParameter = new EntityParameter("P_ELSYS_TYPE_ID", System.Data.DbType.Double);
            if (P_ELSYS_TYPE_ID.HasValue)
                P_ELSYS_TYPE_IDParameter.Value = P_ELSYS_TYPE_ID;
            command.Parameters.Add(P_ELSYS_TYPE_IDParameter);
            EntityParameter P_ERROR_MSGParameter = new EntityParameter("P_ERROR_MSG", System.Data.DbType.String);
            if (P_ERROR_MSG != null)
                P_ERROR_MSGParameter.Value = P_ERROR_MSG;
            command.Parameters.Add(P_ERROR_MSGParameter);
            global::System.Nullable<decimal> result = (global::System.Nullable<decimal>)command.ExecuteScalar();
            if (P_ERROR_MSGParameter.Value != null && !(P_ERROR_MSGParameter.Value is System.DBNull))
              P_ERROR_MSG = (string)P_ERROR_MSGParameter.Value;
            else
              P_ERROR_MSG = default(string);
            return result;
        }

    
        /// <summary>
        /// There are no comments for GET_ENTITY_DATA in the schema.
        /// </summary>
        public global::System.Nullable<decimal> GET_ENTITY_DATA (global::System.Nullable<double> P_LINK_SYNC_SERV_ENT_ID, global::System.Nullable<decimal> P_ITERATOR_NUMBER, ref string P_XML_DATA, ref string P_ERROR_MSG)
        {
            if (this.Connection.State != System.Data.ConnectionState.Open)
              this.Connection.Open();
            System.Data.EntityClient.EntityCommand command = new System.Data.EntityClient.EntityCommand();
            if(this.CommandTimeout.HasValue)
              command.CommandTimeout = this.CommandTimeout.Value;
            command.CommandType = System.Data.CommandType.StoredProcedure;
            command.CommandText = @"SyncServicesEntities.GET_ENTITY_DATA";
            command.Connection = (System.Data.EntityClient.EntityConnection)this.Connection;
            EntityParameter P_LINK_SYNC_SERV_ENT_IDParameter = new EntityParameter("P_LINK_SYNC_SERV_ENT_ID", System.Data.DbType.Double);
            if (P_LINK_SYNC_SERV_ENT_ID.HasValue)
                P_LINK_SYNC_SERV_ENT_IDParameter.Value = P_LINK_SYNC_SERV_ENT_ID;
            command.Parameters.Add(P_LINK_SYNC_SERV_ENT_IDParameter);
            EntityParameter P_ITERATOR_NUMBERParameter = new EntityParameter("P_ITERATOR_NUMBER", System.Data.DbType.Decimal);
            if (P_ITERATOR_NUMBER.HasValue)
                P_ITERATOR_NUMBERParameter.Value = P_ITERATOR_NUMBER;
            command.Parameters.Add(P_ITERATOR_NUMBERParameter);
            EntityParameter P_XML_DATAParameter = new EntityParameter("P_XML_DATA", System.Data.DbType.String);
            if (P_XML_DATA != null)
                P_XML_DATAParameter.Value = P_XML_DATA;
            command.Parameters.Add(P_XML_DATAParameter);
            EntityParameter P_ERROR_MSGParameter = new EntityParameter("P_ERROR_MSG", System.Data.DbType.String);
            if (P_ERROR_MSG != null)
                P_ERROR_MSGParameter.Value = P_ERROR_MSG;
            command.Parameters.Add(P_ERROR_MSGParameter);
            global::System.Nullable<decimal> result = (global::System.Nullable<decimal>)command.ExecuteScalar();
            if (P_XML_DATAParameter.Value != null && !(P_XML_DATAParameter.Value is System.DBNull))
              P_XML_DATA = (string)P_XML_DATAParameter.Value;
            else
              P_XML_DATA = default(string);
            if (P_ERROR_MSGParameter.Value != null && !(P_ERROR_MSGParameter.Value is System.DBNull))
              P_ERROR_MSG = (string)P_ERROR_MSGParameter.Value;
            else
              P_ERROR_MSG = default(string);
            return result;
        }

        #endregion
    }

    #endregion

    #region Entity Classes

    #region ElsysType

    /// <summary>
    /// Тип сущности
    /// </summary>
    /// <LongDescription>
    /// Тип сущности
    /// </LongDescription>
    /// <KeyProperties>
    /// ID
    /// </KeyProperties>
    [EdmEntityTypeAttribute(NamespaceName="SyncServicesModel", Name="ElsysType")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class ElsysType : EntityObject
    {
        #region Factory Method

        /// <summary>
        /// Create a new ElsysType object.
        /// </summary>
        /// <param name="iD">Initial value of ID.</param>
        /// <param name="tYPENAME">Initial value of TYPENAME.</param>
        /// <param name="tABLENAME">Initial value of TABLENAME.</param>
        /// <param name="iSDICTIONARY">Initial value of ISDICTIONARY.</param>
        /// <param name="iSANALYTIC">Initial value of ISANALYTIC.</param>
        /// <param name="iSEXPORT">Initial value of ISEXPORT.</param>
        public static ElsysType CreateElsysType(long iD, string tYPENAME, string tABLENAME, bool iSDICTIONARY, bool iSANALYTIC, bool iSEXPORT)
        {
            ElsysType elsysType = new ElsysType();
            elsysType.ID = iD;
            elsysType.TYPENAME = tYPENAME;
            elsysType.TABLENAME = tABLENAME;
            elsysType.ISDICTIONARY = iSDICTIONARY;
            elsysType.ISANALYTIC = iSANALYTIC;
            elsysType.ISEXPORT = iSEXPORT;
            return elsysType;
        }

        #endregion

        #region Properties
    
        /// <summary>
        /// Идентификатор
        /// </summary>
        /// <LongDescription>
        /// Идентификатор
        /// </LongDescription>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public long ID
        {
            get
            {
                long value = _ID;
                OnGetID(ref value);
                return value;
            }
            set
            {
                if (_ID != value)
                {
                  OnIDChanging(ref value);
                  ReportPropertyChanging("ID");
                  _ID = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("ID");
                  OnIDChanged();
              }
            }
        }
        private long _ID;
        partial void OnGetID(ref long value);
        partial void OnIDChanging(ref long value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Наименование
        /// </summary>
        /// <LongDescription>
        /// Наименование
        /// </LongDescription>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public string TYPENAME
        {
            get
            {
                string value = _TYPENAME;
                OnGetTYPENAME(ref value);
                return value;
            }
            set
            {
                if (_TYPENAME != value)
                {
                  OnTYPENAMEChanging(ref value);
                  ReportPropertyChanging("TYPENAME");
                  _TYPENAME = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("TYPENAME");
                  OnTYPENAMEChanged();
              }
            }
        }
        private string _TYPENAME;
        partial void OnGetTYPENAME(ref string value);
        partial void OnTYPENAMEChanging(ref string value);
        partial void OnTYPENAMEChanged();
    
        /// <summary>
        /// Признак необходимости репликации (1 - реплицируют, 0 - не реплицируют) 
        /// </summary>
        /// <LongDescription>
        /// Признак необходимости репликации (1 - реплицируют, 0 - не реплицируют) 
        /// </LongDescription>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public global::System.Nullable<bool> REPLNEED
        {
            get
            {
                global::System.Nullable<bool> value = _REPLNEED;
                OnGetREPLNEED(ref value);
                return value;
            }
            set
            {
                if (_REPLNEED != value)
                {
                  OnREPLNEEDChanging(ref value);
                  ReportPropertyChanging("REPLNEED");
                  _REPLNEED = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("REPLNEED");
                  OnREPLNEEDChanged();
              }
            }
        }
        private global::System.Nullable<bool> _REPLNEED = false;
        partial void OnGetREPLNEED(ref global::System.Nullable<bool> value);
        partial void OnREPLNEEDChanging(ref global::System.Nullable<bool> value);
        partial void OnREPLNEEDChanged();
    
        /// <summary>
        /// Наименование таблицы
        /// </summary>
        /// <LongDescription>
        /// Наименование таблицы
        /// </LongDescription>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public string TABLENAME
        {
            get
            {
                string value = _TABLENAME;
                OnGetTABLENAME(ref value);
                return value;
            }
            set
            {
                if (_TABLENAME != value)
                {
                  OnTABLENAMEChanging(ref value);
                  ReportPropertyChanging("TABLENAME");
                  _TABLENAME = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("TABLENAME");
                  OnTABLENAMEChanged();
              }
            }
        }
        private string _TABLENAME;
        partial void OnGetTABLENAME(ref string value);
        partial void OnTABLENAMEChanging(ref string value);
        partial void OnTABLENAMEChanged();
    
        /// <summary>
        /// Таг типа
        /// </summary>
        /// <LongDescription>
        /// Таг типа
        /// </LongDescription>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public string TAG
        {
            get
            {
                string value = _TAG;
                OnGetTAG(ref value);
                return value;
            }
            set
            {
                if (_TAG != value)
                {
                  OnTAGChanging(ref value);
                  ReportPropertyChanging("TAG");
                  _TAG = StructuralObject.SetValidValue(value, true);
                  ReportPropertyChanged("TAG");
                  OnTAGChanged();
              }
            }
        }
        private string _TAG;
        partial void OnGetTAG(ref string value);
        partial void OnTAGChanging(ref string value);
        partial void OnTAGChanged();
    
        /// <summary>
        /// Является справочником (0 - нет, 1 - да)
        /// </summary>
        /// <LongDescription>
        /// Является справочником (0 - нет, 1 - да)
        /// </LongDescription>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public bool ISDICTIONARY
        {
            get
            {
                bool value = _ISDICTIONARY;
                OnGetISDICTIONARY(ref value);
                return value;
            }
            set
            {
                if (_ISDICTIONARY != value)
                {
                  OnISDICTIONARYChanging(ref value);
                  ReportPropertyChanging("ISDICTIONARY");
                  _ISDICTIONARY = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("ISDICTIONARY");
                  OnISDICTIONARYChanged();
              }
            }
        }
        private bool _ISDICTIONARY = false;
        partial void OnGetISDICTIONARY(ref bool value);
        partial void OnISDICTIONARYChanging(ref bool value);
        partial void OnISDICTIONARYChanged();
    
        /// <summary>
        /// Ссылка на запрос для сущности
        /// </summary>
        /// <LongDescription>
        /// Ссылка на запрос для сущности
        /// </LongDescription>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public global::System.Nullable<long> MASTERQUERYID
        {
            get
            {
                global::System.Nullable<long> value = _MASTERQUERYID;
                OnGetMASTERQUERYID(ref value);
                return value;
            }
            set
            {
                if (_MASTERQUERYID != value)
                {
                  OnMASTERQUERYIDChanging(ref value);
                  ReportPropertyChanging("MASTERQUERYID");
                  _MASTERQUERYID = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("MASTERQUERYID");
                  OnMASTERQUERYIDChanged();
              }
            }
        }
        private global::System.Nullable<long> _MASTERQUERYID;
        partial void OnGetMASTERQUERYID(ref global::System.Nullable<long> value);
        partial void OnMASTERQUERYIDChanging(ref global::System.Nullable<long> value);
        partial void OnMASTERQUERYIDChanged();
    
        /// <summary>
        /// Ссылка на компонент, с помощью которого осуществляется выбор значения из этого справочника (пока актуально только для справочников)
        /// </summary>
        /// <LongDescription>
        /// Ссылка на компонент, с помощью которого осуществляется выбор значения из этого справочника (пока актуально только для справочников)
        /// </LongDescription>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public global::System.Nullable<long> SELECTCOMPONENTID
        {
            get
            {
                global::System.Nullable<long> value = _SELECTCOMPONENTID;
                OnGetSELECTCOMPONENTID(ref value);
                return value;
            }
            set
            {
                if (_SELECTCOMPONENTID != value)
                {
                  OnSELECTCOMPONENTIDChanging(ref value);
                  ReportPropertyChanging("SELECTCOMPONENTID");
                  _SELECTCOMPONENTID = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("SELECTCOMPONENTID");
                  OnSELECTCOMPONENTIDChanged();
              }
            }
        }
        private global::System.Nullable<long> _SELECTCOMPONENTID;
        partial void OnGetSELECTCOMPONENTID(ref global::System.Nullable<long> value);
        partial void OnSELECTCOMPONENTIDChanging(ref global::System.Nullable<long> value);
        partial void OnSELECTCOMPONENTIDChanged();
    
        /// <summary>
        /// Является ли аналитикой (0 - нет, 1 - да)
        /// </summary>
        /// <LongDescription>
        /// Является ли аналитикой (0 - нет, 1 - да)
        /// </LongDescription>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public bool ISANALYTIC
        {
            get
            {
                bool value = _ISANALYTIC;
                OnGetISANALYTIC(ref value);
                return value;
            }
            set
            {
                if (_ISANALYTIC != value)
                {
                  OnISANALYTICChanging(ref value);
                  ReportPropertyChanging("ISANALYTIC");
                  _ISANALYTIC = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("ISANALYTIC");
                  OnISANALYTICChanged();
              }
            }
        }
        private bool _ISANALYTIC = false;
        partial void OnGetISANALYTIC(ref bool value);
        partial void OnISANALYTICChanging(ref bool value);
        partial void OnISANALYTICChanged();
    
        /// <summary>
        /// ID Группы доктов (NULL - не документ)
        /// </summary>
        /// <LongDescription>
        /// ID Группы доктов (NULL - не документ)
        /// </LongDescription>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public global::System.Nullable<int> DOCUMENTGROUPID
        {
            get
            {
                global::System.Nullable<int> value = _DOCUMENTGROUPID;
                OnGetDOCUMENTGROUPID(ref value);
                return value;
            }
            set
            {
                if (_DOCUMENTGROUPID != value)
                {
                  OnDOCUMENTGROUPIDChanging(ref value);
                  ReportPropertyChanging("DOCUMENTGROUPID");
                  _DOCUMENTGROUPID = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("DOCUMENTGROUPID");
                  OnDOCUMENTGROUPIDChanged();
              }
            }
        }
        private global::System.Nullable<int> _DOCUMENTGROUPID;
        partial void OnGetDOCUMENTGROUPID(ref global::System.Nullable<int> value);
        partial void OnDOCUMENTGROUPIDChanging(ref global::System.Nullable<int> value);
        partial void OnDOCUMENTGROUPIDChanged();
    
        /// <summary>
        /// ID редактора сущности
        /// </summary>
        /// <LongDescription>
        /// ID редактора сущности
        /// </LongDescription>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public global::System.Nullable<long> DEFAULTEDITORCOMPONENTID
        {
            get
            {
                global::System.Nullable<long> value = _DEFAULTEDITORCOMPONENTID;
                OnGetDEFAULTEDITORCOMPONENTID(ref value);
                return value;
            }
            set
            {
                if (_DEFAULTEDITORCOMPONENTID != value)
                {
                  OnDEFAULTEDITORCOMPONENTIDChanging(ref value);
                  ReportPropertyChanging("DEFAULTEDITORCOMPONENTID");
                  _DEFAULTEDITORCOMPONENTID = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("DEFAULTEDITORCOMPONENTID");
                  OnDEFAULTEDITORCOMPONENTIDChanged();
              }
            }
        }
        private global::System.Nullable<long> _DEFAULTEDITORCOMPONENTID;
        partial void OnGetDEFAULTEDITORCOMPONENTID(ref global::System.Nullable<long> value);
        partial void OnDEFAULTEDITORCOMPONENTIDChanging(ref global::System.Nullable<long> value);
        partial void OnDEFAULTEDITORCOMPONENTIDChanged();
    
        /// <summary>
        /// Ссылка на компонент, с помощью которого осуществляется выбор значения из этого справочника (верхний уровень деревянных справичников)
        /// </summary>
        /// <LongDescription>
        /// Ссылка на компонент, с помощью которого осуществляется выбор значения из этого справочника (верхний уровень деревянных справичников)
        /// </LongDescription>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public global::System.Nullable<long> SELECTCOMPONENT2ID
        {
            get
            {
                global::System.Nullable<long> value = _SELECTCOMPONENT2ID;
                OnGetSELECTCOMPONENT2ID(ref value);
                return value;
            }
            set
            {
                if (_SELECTCOMPONENT2ID != value)
                {
                  OnSELECTCOMPONENT2IDChanging(ref value);
                  ReportPropertyChanging("SELECTCOMPONENT2ID");
                  _SELECTCOMPONENT2ID = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("SELECTCOMPONENT2ID");
                  OnSELECTCOMPONENT2IDChanged();
              }
            }
        }
        private global::System.Nullable<long> _SELECTCOMPONENT2ID;
        partial void OnGetSELECTCOMPONENT2ID(ref global::System.Nullable<long> value);
        partial void OnSELECTCOMPONENT2IDChanging(ref global::System.Nullable<long> value);
        partial void OnSELECTCOMPONENT2IDChanged();
    
        /// <summary>
        /// Какой программист создал?
        /// </summary>
        /// <LongDescription>
        /// Какой программист создал?
        /// </LongDescription>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public string CREATEDBYTERMINAL
        {
            get
            {
                string value = _CREATEDBYTERMINAL;
                OnGetCREATEDBYTERMINAL(ref value);
                return value;
            }
            set
            {
                if (_CREATEDBYTERMINAL != value)
                {
                  OnCREATEDBYTERMINALChanging(ref value);
                  ReportPropertyChanging("CREATEDBYTERMINAL");
                  _CREATEDBYTERMINAL = StructuralObject.SetValidValue(value, true);
                  ReportPropertyChanged("CREATEDBYTERMINAL");
                  OnCREATEDBYTERMINALChanged();
              }
            }
        }
        private string _CREATEDBYTERMINAL;
        partial void OnGetCREATEDBYTERMINAL(ref string value);
        partial void OnCREATEDBYTERMINALChanging(ref string value);
        partial void OnCREATEDBYTERMINALChanged();
    
        /// <summary>
        /// Какой программист редактировал?
        /// </summary>
        /// <LongDescription>
        /// Какой программист редактировал?
        /// </LongDescription>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public string MODIFIEDBYTERMINAL
        {
            get
            {
                string value = _MODIFIEDBYTERMINAL;
                OnGetMODIFIEDBYTERMINAL(ref value);
                return value;
            }
            set
            {
                if (_MODIFIEDBYTERMINAL != value)
                {
                  OnMODIFIEDBYTERMINALChanging(ref value);
                  ReportPropertyChanging("MODIFIEDBYTERMINAL");
                  _MODIFIEDBYTERMINAL = StructuralObject.SetValidValue(value, true);
                  ReportPropertyChanged("MODIFIEDBYTERMINAL");
                  OnMODIFIEDBYTERMINALChanged();
              }
            }
        }
        private string _MODIFIEDBYTERMINAL;
        partial void OnGetMODIFIEDBYTERMINAL(ref string value);
        partial void OnMODIFIEDBYTERMINALChanging(ref string value);
        partial void OnMODIFIEDBYTERMINALChanged();
    
        /// <summary>
        /// Выгружать аналитику в 1с?
        /// </summary>
        /// <LongDescription>
        /// Выгружать аналитику в 1с?
        /// </LongDescription>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public bool ISEXPORT
        {
            get
            {
                bool value = _ISEXPORT;
                OnGetISEXPORT(ref value);
                return value;
            }
            set
            {
                if (_ISEXPORT != value)
                {
                  OnISEXPORTChanging(ref value);
                  ReportPropertyChanging("ISEXPORT");
                  _ISEXPORT = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("ISEXPORT");
                  OnISEXPORTChanged();
              }
            }
        }
        private bool _ISEXPORT = false;
        partial void OnGetISEXPORT(ref bool value);
        partial void OnISEXPORTChanging(ref bool value);
        partial void OnISEXPORTChanged();
    
        /// <summary>
        /// There are no comments for DEVRESPONSIBLE in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public global::System.Nullable<long> DEVRESPONSIBLE
        {
            get
            {
                global::System.Nullable<long> value = _DEVRESPONSIBLE;
                OnGetDEVRESPONSIBLE(ref value);
                return value;
            }
            set
            {
                if (_DEVRESPONSIBLE != value)
                {
                  OnDEVRESPONSIBLEChanging(ref value);
                  ReportPropertyChanging("DEVRESPONSIBLE");
                  _DEVRESPONSIBLE = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("DEVRESPONSIBLE");
                  OnDEVRESPONSIBLEChanged();
              }
            }
        }
        private global::System.Nullable<long> _DEVRESPONSIBLE;
        partial void OnGetDEVRESPONSIBLE(ref global::System.Nullable<long> value);
        partial void OnDEVRESPONSIBLEChanging(ref global::System.Nullable<long> value);
        partial void OnDEVRESPONSIBLEChanged();
    
        /// <summary>
        /// There are no comments for ANALYTICRESPONSIBLE in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public global::System.Nullable<long> ANALYTICRESPONSIBLE
        {
            get
            {
                global::System.Nullable<long> value = _ANALYTICRESPONSIBLE;
                OnGetANALYTICRESPONSIBLE(ref value);
                return value;
            }
            set
            {
                if (_ANALYTICRESPONSIBLE != value)
                {
                  OnANALYTICRESPONSIBLEChanging(ref value);
                  ReportPropertyChanging("ANALYTICRESPONSIBLE");
                  _ANALYTICRESPONSIBLE = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("ANALYTICRESPONSIBLE");
                  OnANALYTICRESPONSIBLEChanged();
              }
            }
        }
        private global::System.Nullable<long> _ANALYTICRESPONSIBLE;
        partial void OnGetANALYTICRESPONSIBLE(ref global::System.Nullable<long> value);
        partial void OnANALYTICRESPONSIBLEChanging(ref global::System.Nullable<long> value);
        partial void OnANALYTICRESPONSIBLEChanged();
    
        /// <summary>
        /// Наименование таблицы (данные)
        /// </summary>
        /// <LongDescription>
        /// Наименование таблицы (данные)
        /// </LongDescription>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public string PHYSICALTABLENAME
        {
            get
            {
                string value = _PHYSICALTABLENAME;
                OnGetPHYSICALTABLENAME(ref value);
                return value;
            }
            set
            {
                if (_PHYSICALTABLENAME != value)
                {
                  OnPHYSICALTABLENAMEChanging(ref value);
                  ReportPropertyChanging("PHYSICALTABLENAME");
                  _PHYSICALTABLENAME = StructuralObject.SetValidValue(value, true);
                  ReportPropertyChanged("PHYSICALTABLENAME");
                  OnPHYSICALTABLENAMEChanged();
              }
            }
        }
        private string _PHYSICALTABLENAME;
        partial void OnGetPHYSICALTABLENAME(ref string value);
        partial void OnPHYSICALTABLENAMEChanging(ref string value);
        partial void OnPHYSICALTABLENAMEChanged();
    
        /// <summary>
        /// There are no comments for COMPONENTPARENTFORENTITY in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public global::System.Nullable<long> COMPONENTPARENTFORENTITY
        {
            get
            {
                global::System.Nullable<long> value = _COMPONENTPARENTFORENTITY;
                OnGetCOMPONENTPARENTFORENTITY(ref value);
                return value;
            }
            set
            {
                if (_COMPONENTPARENTFORENTITY != value)
                {
                  OnCOMPONENTPARENTFORENTITYChanging(ref value);
                  ReportPropertyChanging("COMPONENTPARENTFORENTITY");
                  _COMPONENTPARENTFORENTITY = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("COMPONENTPARENTFORENTITY");
                  OnCOMPONENTPARENTFORENTITYChanged();
              }
            }
        }
        private global::System.Nullable<long> _COMPONENTPARENTFORENTITY = 0;
        partial void OnGetCOMPONENTPARENTFORENTITY(ref global::System.Nullable<long> value);
        partial void OnCOMPONENTPARENTFORENTITYChanging(ref global::System.Nullable<long> value);
        partial void OnCOMPONENTPARENTFORENTITYChanged();
    
        /// <summary>
        /// Корректировка сущности (везде/ЦО/филиал)
        /// </summary>
        /// <LongDescription>
        /// Корректировка сущности (везде/ЦО/филиал)
        /// </LongDescription>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public global::System.Nullable<long> EDITING
        {
            get
            {
                global::System.Nullable<long> value = _EDITING;
                OnGetEDITING(ref value);
                return value;
            }
            set
            {
                if (_EDITING != value)
                {
                  OnEDITINGChanging(ref value);
                  ReportPropertyChanging("EDITING");
                  _EDITING = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("EDITING");
                  OnEDITINGChanged();
              }
            }
        }
        private global::System.Nullable<long> _EDITING = 1126;
        partial void OnGetEDITING(ref global::System.Nullable<long> value);
        partial void OnEDITINGChanging(ref global::System.Nullable<long> value);
        partial void OnEDITINGChanged();
    
        /// <summary>
        /// Наименование таблицы (синхронизация)
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public string SYNCTABLENAME
        {
            get
            {
                string value = _SYNCTABLENAME;
                OnGetSYNCTABLENAME(ref value);
                return value;
            }
            set
            {
                if (_SYNCTABLENAME != value)
                {
                  OnSYNCTABLENAMEChanging(ref value);
                  ReportPropertyChanging("SYNCTABLENAME");
                  _SYNCTABLENAME = StructuralObject.SetValidValue(value, true);
                  ReportPropertyChanged("SYNCTABLENAME");
                  OnSYNCTABLENAMEChanged();
              }
            }
        }
        private string _SYNCTABLENAME;
        partial void OnGetSYNCTABLENAME(ref string value);
        partial void OnSYNCTABLENAMEChanging(ref string value);
        partial void OnSYNCTABLENAMEChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// There are no comments for LinkSyncServicesEntities in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SyncServicesModel", "ElsysType_LinkSyncServicesEntity", "LinkSyncServicesEntities")]
        public EntityCollection<LinkSyncServicesEntity> LinkSyncServicesEntities
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<LinkSyncServicesEntity>("SyncServicesModel.ElsysType_LinkSyncServicesEntity", "LinkSyncServicesEntities");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<LinkSyncServicesEntity>("SyncServicesModel.ElsysType_LinkSyncServicesEntity", "LinkSyncServicesEntities", value);
                }
            }
        }

        #endregion
    }
    #endregion

    #region LinkSyncServicesEntity

    /// <summary>
    /// Связка службы синхронизации с сущностью
    /// </summary>
    /// <LongDescription>
    /// Связка службы синхронизации с сущностью
    /// </LongDescription>
    /// <KeyProperties>
    /// ID
    /// </KeyProperties>
    [EdmEntityTypeAttribute(NamespaceName="SyncServicesModel", Name="LinkSyncServicesEntity")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class LinkSyncServicesEntity : EntityObject
    {
        #region Factory Method

        /// <summary>
        /// Create a new LinkSyncServicesEntity object.
        /// </summary>
        /// <param name="iD">Initial value of ID.</param>
        /// <param name="eLSYSSYNCSERVICEID">Initial value of ELSYSSYNCSERVICEID.</param>
        /// <param name="eLSYSTYPEID">Initial value of ELSYSTYPEID.</param>
        public static LinkSyncServicesEntity CreateLinkSyncServicesEntity(long iD, long eLSYSSYNCSERVICEID, long eLSYSTYPEID)
        {
            LinkSyncServicesEntity linkSyncServicesEntity = new LinkSyncServicesEntity();
            linkSyncServicesEntity.ID = iD;
            linkSyncServicesEntity.ELSYSSYNCSERVICEID = eLSYSSYNCSERVICEID;
            linkSyncServicesEntity.ELSYSTYPEID = eLSYSTYPEID;
            return linkSyncServicesEntity;
        }

        #endregion

        #region Properties
    
        /// <summary>
        /// Идентификатор
        /// </summary>
        /// <LongDescription>
        /// Идентификатор
        /// </LongDescription>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public long ID
        {
            get
            {
                long value = _ID;
                OnGetID(ref value);
                return value;
            }
            set
            {
                if (_ID != value)
                {
                  OnIDChanging(ref value);
                  ReportPropertyChanging("ID");
                  _ID = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("ID");
                  OnIDChanged();
              }
            }
        }
        private long _ID;
        partial void OnGetID(ref long value);
        partial void OnIDChanging(ref long value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Идентификатор сервиса синхронизации
        /// </summary>
        /// <LongDescription>
        /// Идентификатор сервиса синхронизации
        /// </LongDescription>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public long ELSYSSYNCSERVICEID
        {
            get
            {
                long value = _ELSYSSYNCSERVICEID;
                OnGetELSYSSYNCSERVICEID(ref value);
                return value;
            }
            set
            {
                if (_ELSYSSYNCSERVICEID != value)
                {
                  OnELSYSSYNCSERVICEIDChanging(ref value);
                  ReportPropertyChanging("ELSYSSYNCSERVICEID");
                  _ELSYSSYNCSERVICEID = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("ELSYSSYNCSERVICEID");
                  OnELSYSSYNCSERVICEIDChanged();
              }
            }
        }
        private long _ELSYSSYNCSERVICEID;
        partial void OnGetELSYSSYNCSERVICEID(ref long value);
        partial void OnELSYSSYNCSERVICEIDChanging(ref long value);
        partial void OnELSYSSYNCSERVICEIDChanged();
    
        /// <summary>
        /// Идентификатор сущности
        /// </summary>
        /// <LongDescription>
        /// Идентификатор сущности
        /// </LongDescription>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public long ELSYSTYPEID
        {
            get
            {
                long value = _ELSYSTYPEID;
                OnGetELSYSTYPEID(ref value);
                return value;
            }
            set
            {
                if (_ELSYSTYPEID != value)
                {
                  OnELSYSTYPEIDChanging(ref value);
                  ReportPropertyChanging("ELSYSTYPEID");
                  _ELSYSTYPEID = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("ELSYSTYPEID");
                  OnELSYSTYPEIDChanged();
              }
            }
        }
        private long _ELSYSTYPEID;
        partial void OnGetELSYSTYPEID(ref long value);
        partial void OnELSYSTYPEIDChanging(ref long value);
        partial void OnELSYSTYPEIDChanged();
    
        /// <summary>
        /// Дата и время последней успешной синхронизации
        /// </summary>
        /// <LongDescription>
        /// Дата и время последней успешной синхронизации
        /// </LongDescription>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public global::System.Nullable<System.DateTime> LASTSYNCTIME
        {
            get
            {
                global::System.Nullable<System.DateTime> value = _LASTSYNCTIME;
                OnGetLASTSYNCTIME(ref value);
                return value;
            }
            set
            {
                if (_LASTSYNCTIME != value)
                {
                  OnLASTSYNCTIMEChanging(ref value);
                  ReportPropertyChanging("LASTSYNCTIME");
                  _LASTSYNCTIME = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("LASTSYNCTIME");
                  OnLASTSYNCTIMEChanged();
              }
            }
        }
        private global::System.Nullable<System.DateTime> _LASTSYNCTIME;
        partial void OnGetLASTSYNCTIME(ref global::System.Nullable<System.DateTime> value);
        partial void OnLASTSYNCTIMEChanging(ref global::System.Nullable<System.DateTime> value);
        partial void OnLASTSYNCTIMEChanged();
    
        /// <summary>
        /// Максимальное кол-во элементов передаваемых за итерацию
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public global::System.Nullable<long> ITERATORITEMSLIMIT
        {
            get
            {
                global::System.Nullable<long> value = _ITERATORITEMSLIMIT;
                OnGetITERATORITEMSLIMIT(ref value);
                return value;
            }
            set
            {
                if (_ITERATORITEMSLIMIT != value)
                {
                  OnITERATORITEMSLIMITChanging(ref value);
                  ReportPropertyChanging("ITERATORITEMSLIMIT");
                  _ITERATORITEMSLIMIT = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("ITERATORITEMSLIMIT");
                  OnITERATORITEMSLIMITChanged();
              }
            }
        }
        private global::System.Nullable<long> _ITERATORITEMSLIMIT = 0;
        partial void OnGetITERATORITEMSLIMIT(ref global::System.Nullable<long> value);
        partial void OnITERATORITEMSLIMITChanging(ref global::System.Nullable<long> value);
        partial void OnITERATORITEMSLIMITChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// There are no comments for ElsysType in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SyncServicesModel", "ElsysType_LinkSyncServicesEntity", "ElsysType")]
        public ElsysType ElsysType
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<ElsysType>("SyncServicesModel.ElsysType_LinkSyncServicesEntity", "ElsysType").Value;
            }
            set
            {
                ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<ElsysType>("SyncServicesModel.ElsysType_LinkSyncServicesEntity", "ElsysType").Value = value;
            }
        }
    
        /// <summary>
        /// There are no comments for ElsysType in the schema.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<ElsysType> ElsysTypeReference
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<ElsysType>("SyncServicesModel.ElsysType_LinkSyncServicesEntity", "ElsysType");
            }
            set
            {
                if (value != null)
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<ElsysType>("SyncServicesModel.ElsysType_LinkSyncServicesEntity", "ElsysType", value);
                }
                else 
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<ElsysType>("SyncServicesModel.ElsysType_LinkSyncServicesEntity", "ElsysType").Value = null;
                }
            }
        }
    
        /// <summary>
        /// There are no comments for ElsysSyncServic in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SyncServicesModel", "ElsysSyncServic_LinkSyncServicesEntity", "ElsysSyncServic")]
        public ElsysSyncServic ElsysSyncServic
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<ElsysSyncServic>("SyncServicesModel.ElsysSyncServic_LinkSyncServicesEntity", "ElsysSyncServic").Value;
            }
            set
            {
                ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<ElsysSyncServic>("SyncServicesModel.ElsysSyncServic_LinkSyncServicesEntity", "ElsysSyncServic").Value = value;
            }
        }
    
        /// <summary>
        /// There are no comments for ElsysSyncServic in the schema.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<ElsysSyncServic> ElsysSyncServicReference
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<ElsysSyncServic>("SyncServicesModel.ElsysSyncServic_LinkSyncServicesEntity", "ElsysSyncServic");
            }
            set
            {
                if (value != null)
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<ElsysSyncServic>("SyncServicesModel.ElsysSyncServic_LinkSyncServicesEntity", "ElsysSyncServic", value);
                }
                else 
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<ElsysSyncServic>("SyncServicesModel.ElsysSyncServic_LinkSyncServicesEntity", "ElsysSyncServic").Value = null;
                }
            }
        }

        #endregion
    }
    #endregion

    #region VLinkSyncSerEntNeeded

    /// <summary>
    /// There are no comments for SyncServicesModel.VLinkSyncSerEntNeeded in the schema.
    /// </summary>
    /// <KeyProperties>
    /// ID
    /// ELSYSTYPEID
    /// ELSYSTYPENAME
    /// </KeyProperties>
    [EdmEntityTypeAttribute(NamespaceName="SyncServicesModel", Name="VLinkSyncSerEntNeeded")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class VLinkSyncSerEntNeeded : EntityObject
    {
        #region Factory Method

        /// <summary>
        /// Create a new VLinkSyncSerEntNeeded object.
        /// </summary>
        /// <param name="iD">Initial value of ID.</param>
        /// <param name="eLSYSTYPEID">Initial value of ELSYSTYPEID.</param>
        /// <param name="eLSYSTYPENAME">Initial value of ELSYSTYPENAME.</param>
        public static VLinkSyncSerEntNeeded CreateVLinkSyncSerEntNeeded(long iD, long eLSYSTYPEID, string eLSYSTYPENAME)
        {
            VLinkSyncSerEntNeeded vLinkSyncSerEntNeeded = new VLinkSyncSerEntNeeded();
            vLinkSyncSerEntNeeded.ID = iD;
            vLinkSyncSerEntNeeded.ELSYSTYPEID = eLSYSTYPEID;
            vLinkSyncSerEntNeeded.ELSYSTYPENAME = eLSYSTYPENAME;
            return vLinkSyncSerEntNeeded;
        }

        #endregion

        #region Properties
    
        /// <summary>
        /// There are no comments for ID in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public long ID
        {
            get
            {
                long value = _ID;
                OnGetID(ref value);
                return value;
            }
            set
            {
                if (_ID != value)
                {
                  OnIDChanging(ref value);
                  ReportPropertyChanging("ID");
                  _ID = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("ID");
                  OnIDChanged();
              }
            }
        }
        private long _ID;
        partial void OnGetID(ref long value);
        partial void OnIDChanging(ref long value);
        partial void OnIDChanged();
    
        /// <summary>
        /// There are no comments for ELSYSTYPEID in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public long ELSYSTYPEID
        {
            get
            {
                long value = _ELSYSTYPEID;
                OnGetELSYSTYPEID(ref value);
                return value;
            }
            set
            {
                if (_ELSYSTYPEID != value)
                {
                  OnELSYSTYPEIDChanging(ref value);
                  ReportPropertyChanging("ELSYSTYPEID");
                  _ELSYSTYPEID = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("ELSYSTYPEID");
                  OnELSYSTYPEIDChanged();
              }
            }
        }
        private long _ELSYSTYPEID;
        partial void OnGetELSYSTYPEID(ref long value);
        partial void OnELSYSTYPEIDChanging(ref long value);
        partial void OnELSYSTYPEIDChanged();
    
        /// <summary>
        /// There are no comments for ELSYSTYPENAME in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public string ELSYSTYPENAME
        {
            get
            {
                string value = _ELSYSTYPENAME;
                OnGetELSYSTYPENAME(ref value);
                return value;
            }
            set
            {
                if (_ELSYSTYPENAME != value)
                {
                  OnELSYSTYPENAMEChanging(ref value);
                  ReportPropertyChanging("ELSYSTYPENAME");
                  _ELSYSTYPENAME = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("ELSYSTYPENAME");
                  OnELSYSTYPENAMEChanged();
              }
            }
        }
        private string _ELSYSTYPENAME;
        partial void OnGetELSYSTYPENAME(ref string value);
        partial void OnELSYSTYPENAMEChanging(ref string value);
        partial void OnELSYSTYPENAMEChanged();
    
        /// <summary>
        /// There are no comments for LASTSYNCTIME in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public global::System.Nullable<System.DateTime> LASTSYNCTIME
        {
            get
            {
                global::System.Nullable<System.DateTime> value = _LASTSYNCTIME;
                OnGetLASTSYNCTIME(ref value);
                return value;
            }
            set
            {
                if (_LASTSYNCTIME != value)
                {
                  OnLASTSYNCTIMEChanging(ref value);
                  ReportPropertyChanging("LASTSYNCTIME");
                  _LASTSYNCTIME = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("LASTSYNCTIME");
                  OnLASTSYNCTIMEChanged();
              }
            }
        }
        private global::System.Nullable<System.DateTime> _LASTSYNCTIME;
        partial void OnGetLASTSYNCTIME(ref global::System.Nullable<System.DateTime> value);
        partial void OnLASTSYNCTIMEChanging(ref global::System.Nullable<System.DateTime> value);
        partial void OnLASTSYNCTIMEChanged();

        #endregion
    }
    #endregion

    #region ElsysSyncServic

    /// <summary>
    /// Сервисы по синхронизации
    /// </summary>
    /// <LongDescription>
    /// Сервисы по синхронизации
    /// </LongDescription>
    /// <KeyProperties>
    /// ID
    /// </KeyProperties>
    [EdmEntityTypeAttribute(NamespaceName="SyncServicesModel", Name="ElsysSyncServic")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class ElsysSyncServic : EntityObject
    {
        #region Factory Method

        /// <summary>
        /// Create a new ElsysSyncServic object.
        /// </summary>
        /// <param name="iD">Initial value of ID.</param>
        /// <param name="dESCRIPTION">Initial value of DESCRIPTION.</param>
        /// <param name="eNDPOINTADDRESS">Initial value of ENDPOINTADDRESS.</param>
        public static ElsysSyncServic CreateElsysSyncServic(long iD, string dESCRIPTION, string eNDPOINTADDRESS)
        {
            ElsysSyncServic elsysSyncServic = new ElsysSyncServic();
            elsysSyncServic.ID = iD;
            elsysSyncServic.DESCRIPTION = dESCRIPTION;
            elsysSyncServic.ENDPOINTADDRESS = eNDPOINTADDRESS;
            return elsysSyncServic;
        }

        #endregion

        #region Properties
    
        /// <summary>
        /// Идентификатор службы синхронизации
        /// </summary>
        /// <LongDescription>
        /// Идентификатор службы синхронизации
        /// </LongDescription>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public long ID
        {
            get
            {
                long value = _ID;
                OnGetID(ref value);
                return value;
            }
            set
            {
                if (_ID != value)
                {
                  OnIDChanging(ref value);
                  ReportPropertyChanging("ID");
                  _ID = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("ID");
                  OnIDChanged();
              }
            }
        }
        private long _ID;
        partial void OnGetID(ref long value);
        partial void OnIDChanging(ref long value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Идентфикатор филиала
        /// </summary>
        /// <LongDescription>
        /// Идентфикатор филиала
        /// </LongDescription>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public global::System.Nullable<long> BRANCHID
        {
            get
            {
                global::System.Nullable<long> value = _BRANCHID;
                OnGetBRANCHID(ref value);
                return value;
            }
            set
            {
                if (_BRANCHID != value)
                {
                  OnBRANCHIDChanging(ref value);
                  ReportPropertyChanging("BRANCHID");
                  _BRANCHID = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("BRANCHID");
                  OnBRANCHIDChanged();
              }
            }
        }
        private global::System.Nullable<long> _BRANCHID;
        partial void OnGetBRANCHID(ref global::System.Nullable<long> value);
        partial void OnBRANCHIDChanging(ref global::System.Nullable<long> value);
        partial void OnBRANCHIDChanged();
    
        /// <summary>
        /// Описание
        /// </summary>
        /// <LongDescription>
        /// Описание
        /// </LongDescription>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public string DESCRIPTION
        {
            get
            {
                string value = _DESCRIPTION;
                OnGetDESCRIPTION(ref value);
                return value;
            }
            set
            {
                if (_DESCRIPTION != value)
                {
                  OnDESCRIPTIONChanging(ref value);
                  ReportPropertyChanging("DESCRIPTION");
                  _DESCRIPTION = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("DESCRIPTION");
                  OnDESCRIPTIONChanged();
              }
            }
        }
        private string _DESCRIPTION;
        partial void OnGetDESCRIPTION(ref string value);
        partial void OnDESCRIPTIONChanging(ref string value);
        partial void OnDESCRIPTIONChanged();
    
        /// <summary>
        /// Адрес сервиса
        /// </summary>
        /// <LongDescription>
        /// Адрес сервиса
        /// </LongDescription>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public string ENDPOINTADDRESS
        {
            get
            {
                string value = _ENDPOINTADDRESS;
                OnGetENDPOINTADDRESS(ref value);
                return value;
            }
            set
            {
                if (_ENDPOINTADDRESS != value)
                {
                  OnENDPOINTADDRESSChanging(ref value);
                  ReportPropertyChanging("ENDPOINTADDRESS");
                  _ENDPOINTADDRESS = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("ENDPOINTADDRESS");
                  OnENDPOINTADDRESSChanged();
              }
            }
        }
        private string _ENDPOINTADDRESS;
        partial void OnGetENDPOINTADDRESS(ref string value);
        partial void OnENDPOINTADDRESSChanging(ref string value);
        partial void OnENDPOINTADDRESSChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// There are no comments for DICPLACE in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SyncServicesModel", "DICPLACE_ElsysSyncServic", "DICPLACE")]
        public DICPLACE DICPLACE
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<DICPLACE>("SyncServicesModel.DICPLACE_ElsysSyncServic", "DICPLACE").Value;
            }
            set
            {
                ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<DICPLACE>("SyncServicesModel.DICPLACE_ElsysSyncServic", "DICPLACE").Value = value;
            }
        }
    
        /// <summary>
        /// There are no comments for DICPLACE in the schema.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<DICPLACE> DICPLACEReference
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<DICPLACE>("SyncServicesModel.DICPLACE_ElsysSyncServic", "DICPLACE");
            }
            set
            {
                if (value != null)
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<DICPLACE>("SyncServicesModel.DICPLACE_ElsysSyncServic", "DICPLACE", value);
                }
                else 
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<DICPLACE>("SyncServicesModel.DICPLACE_ElsysSyncServic", "DICPLACE").Value = null;
                }
            }
        }
    
        /// <summary>
        /// There are no comments for LinkSyncServicesEntities in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SyncServicesModel", "ElsysSyncServic_LinkSyncServicesEntity", "LinkSyncServicesEntities")]
        public EntityCollection<LinkSyncServicesEntity> LinkSyncServicesEntities
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<LinkSyncServicesEntity>("SyncServicesModel.ElsysSyncServic_LinkSyncServicesEntity", "LinkSyncServicesEntities");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<LinkSyncServicesEntity>("SyncServicesModel.ElsysSyncServic_LinkSyncServicesEntity", "LinkSyncServicesEntities", value);
                }
            }
        }

        #endregion
    }
    #endregion

    #region DICPLACE

    /// <summary>
    /// Элемент физической структуры предприятия
    /// </summary>
    /// <LongDescription>
    /// Элемент физической структуры предприятия
    /// </LongDescription>
    /// <KeyProperties>
    /// ID
    /// </KeyProperties>
    [EdmEntityTypeAttribute(NamespaceName="SyncServicesModel", Name="DICPLACE")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class DICPLACE : EntityObject
    {
        #region Factory Method

        /// <summary>
        /// Create a new DICPLACE object.
        /// </summary>
        /// <param name="iD">Initial value of ID.</param>
        /// <param name="nAME">Initial value of NAME.</param>
        /// <param name="cREATEDBY">Initial value of CREATEDBY.</param>
        /// <param name="cREATEDDATE">Initial value of CREATEDDATE.</param>
        /// <param name="sTATUSID">Initial value of STATUSID.</param>
        public static DICPLACE CreateDICPLACE(long iD, string nAME, long cREATEDBY, global::System.DateTime cREATEDDATE, long sTATUSID)
        {
            DICPLACE dICPLACE = new DICPLACE();
            dICPLACE.ID = iD;
            dICPLACE.NAME = nAME;
            dICPLACE.CREATEDBY = cREATEDBY;
            dICPLACE.CREATEDDATE = cREATEDDATE;
            dICPLACE.STATUSID = sTATUSID;
            return dICPLACE;
        }

        #endregion

        #region Properties
    
        /// <summary>
        /// Идентификатор
        /// </summary>
        /// <LongDescription>
        /// Идентификатор
        /// </LongDescription>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public long ID
        {
            get
            {
                long value = _ID;
                OnGetID(ref value);
                return value;
            }
            set
            {
                if (_ID != value)
                {
                  OnIDChanging(ref value);
                  ReportPropertyChanging("ID");
                  _ID = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("ID");
                  OnIDChanged();
              }
            }
        }
        private long _ID;
        partial void OnGetID(ref long value);
        partial void OnIDChanging(ref long value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Родительский элемент
        /// </summary>
        /// <LongDescription>
        /// Родительский элемент
        /// </LongDescription>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public global::System.Nullable<long> PARENTID
        {
            get
            {
                global::System.Nullable<long> value = _PARENTID;
                OnGetPARENTID(ref value);
                return value;
            }
            set
            {
                if (_PARENTID != value)
                {
                  OnPARENTIDChanging(ref value);
                  ReportPropertyChanging("PARENTID");
                  _PARENTID = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("PARENTID");
                  OnPARENTIDChanged();
              }
            }
        }
        private global::System.Nullable<long> _PARENTID;
        partial void OnGetPARENTID(ref global::System.Nullable<long> value);
        partial void OnPARENTIDChanging(ref global::System.Nullable<long> value);
        partial void OnPARENTIDChanged();
    
        /// <summary>
        /// Наименование объекта
        /// </summary>
        /// <LongDescription>
        /// Наименование объекта
        /// </LongDescription>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public string NAME
        {
            get
            {
                string value = _NAME;
                OnGetNAME(ref value);
                return value;
            }
            set
            {
                if (_NAME != value)
                {
                  OnNAMEChanging(ref value);
                  ReportPropertyChanging("NAME");
                  _NAME = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("NAME");
                  OnNAMEChanged();
              }
            }
        }
        private string _NAME;
        partial void OnGetNAME(ref string value);
        partial void OnNAMEChanging(ref string value);
        partial void OnNAMEChanged();
    
        /// <summary>
        /// CREATED_BY
        /// </summary>
        /// <LongDescription>
        /// CREATED_BY
        /// </LongDescription>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public long CREATEDBY
        {
            get
            {
                long value = _CREATEDBY;
                OnGetCREATEDBY(ref value);
                return value;
            }
            set
            {
                if (_CREATEDBY != value)
                {
                  OnCREATEDBYChanging(ref value);
                  ReportPropertyChanging("CREATEDBY");
                  _CREATEDBY = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("CREATEDBY");
                  OnCREATEDBYChanged();
              }
            }
        }
        private long _CREATEDBY;
        partial void OnGetCREATEDBY(ref long value);
        partial void OnCREATEDBYChanging(ref long value);
        partial void OnCREATEDBYChanged();
    
        /// <summary>
        /// CREATED_DATE
        /// </summary>
        /// <LongDescription>
        /// CREATED_DATE
        /// </LongDescription>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime CREATEDDATE
        {
            get
            {
                global::System.DateTime value = _CREATEDDATE;
                OnGetCREATEDDATE(ref value);
                return value;
            }
            set
            {
                if (_CREATEDDATE != value)
                {
                  OnCREATEDDATEChanging(ref value);
                  ReportPropertyChanging("CREATEDDATE");
                  _CREATEDDATE = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("CREATEDDATE");
                  OnCREATEDDATEChanged();
              }
            }
        }
        private global::System.DateTime _CREATEDDATE;
        partial void OnGetCREATEDDATE(ref global::System.DateTime value);
        partial void OnCREATEDDATEChanging(ref global::System.DateTime value);
        partial void OnCREATEDDATEChanged();
    
        /// <summary>
        /// MODIFIED_BY
        /// </summary>
        /// <LongDescription>
        /// MODIFIED_BY
        /// </LongDescription>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public global::System.Nullable<long> MODIFIEDBY
        {
            get
            {
                global::System.Nullable<long> value = _MODIFIEDBY;
                OnGetMODIFIEDBY(ref value);
                return value;
            }
            set
            {
                if (_MODIFIEDBY != value)
                {
                  OnMODIFIEDBYChanging(ref value);
                  ReportPropertyChanging("MODIFIEDBY");
                  _MODIFIEDBY = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("MODIFIEDBY");
                  OnMODIFIEDBYChanged();
              }
            }
        }
        private global::System.Nullable<long> _MODIFIEDBY;
        partial void OnGetMODIFIEDBY(ref global::System.Nullable<long> value);
        partial void OnMODIFIEDBYChanging(ref global::System.Nullable<long> value);
        partial void OnMODIFIEDBYChanged();
    
        /// <summary>
        /// MODIFIED_DATE
        /// </summary>
        /// <LongDescription>
        /// MODIFIED_DATE
        /// </LongDescription>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public global::System.Nullable<System.DateTime> MODIFIEDDATE
        {
            get
            {
                global::System.Nullable<System.DateTime> value = _MODIFIEDDATE;
                OnGetMODIFIEDDATE(ref value);
                return value;
            }
            set
            {
                if (_MODIFIEDDATE != value)
                {
                  OnMODIFIEDDATEChanging(ref value);
                  ReportPropertyChanging("MODIFIEDDATE");
                  _MODIFIEDDATE = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("MODIFIEDDATE");
                  OnMODIFIEDDATEChanged();
              }
            }
        }
        private global::System.Nullable<System.DateTime> _MODIFIEDDATE;
        partial void OnGetMODIFIEDDATE(ref global::System.Nullable<System.DateTime> value);
        partial void OnMODIFIEDDATEChanging(ref global::System.Nullable<System.DateTime> value);
        partial void OnMODIFIEDDATEChanged();
    
        /// <summary>
        /// Тип элемента_Идентификатор
        /// </summary>
        /// <LongDescription>
        /// Тип элемента_Идентификатор
        /// </LongDescription>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public global::System.Nullable<long> TYPEID
        {
            get
            {
                global::System.Nullable<long> value = _TYPEID;
                OnGetTYPEID(ref value);
                return value;
            }
            set
            {
                if (_TYPEID != value)
                {
                  OnTYPEIDChanging(ref value);
                  ReportPropertyChanging("TYPEID");
                  _TYPEID = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("TYPEID");
                  OnTYPEIDChanged();
              }
            }
        }
        private global::System.Nullable<long> _TYPEID;
        partial void OnGetTYPEID(ref global::System.Nullable<long> value);
        partial void OnTYPEIDChanging(ref global::System.Nullable<long> value);
        partial void OnTYPEIDChanged();
    
        /// <summary>
        /// There are no comments for STATUSID in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public long STATUSID
        {
            get
            {
                long value = _STATUSID;
                OnGetSTATUSID(ref value);
                return value;
            }
            set
            {
                if (_STATUSID != value)
                {
                  OnSTATUSIDChanging(ref value);
                  ReportPropertyChanging("STATUSID");
                  _STATUSID = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("STATUSID");
                  OnSTATUSIDChanged();
              }
            }
        }
        private long _STATUSID = 20;
        partial void OnGetSTATUSID(ref long value);
        partial void OnSTATUSIDChanging(ref long value);
        partial void OnSTATUSIDChanged();
    
        /// <summary>
        /// There are no comments for THROUGHCODE in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public global::System.Nullable<long> THROUGHCODE
        {
            get
            {
                global::System.Nullable<long> value = _THROUGHCODE;
                OnGetTHROUGHCODE(ref value);
                return value;
            }
            set
            {
                if (_THROUGHCODE != value)
                {
                  OnTHROUGHCODEChanging(ref value);
                  ReportPropertyChanging("THROUGHCODE");
                  _THROUGHCODE = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("THROUGHCODE");
                  OnTHROUGHCODEChanged();
              }
            }
        }
        private global::System.Nullable<long> _THROUGHCODE;
        partial void OnGetTHROUGHCODE(ref global::System.Nullable<long> value);
        partial void OnTHROUGHCODEChanging(ref global::System.Nullable<long> value);
        partial void OnTHROUGHCODEChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// There are no comments for ElsysSyncServics in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SyncServicesModel", "DICPLACE_ElsysSyncServic", "ElsysSyncServics")]
        public EntityCollection<ElsysSyncServic> ElsysSyncServics
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<ElsysSyncServic>("SyncServicesModel.DICPLACE_ElsysSyncServic", "ElsysSyncServics");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<ElsysSyncServic>("SyncServicesModel.DICPLACE_ElsysSyncServic", "ElsysSyncServics", value);
                }
            }
        }
    
        /// <summary>
        /// There are no comments for DICPLACEs_PARENTID in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SyncServicesModel", "DICPLACE_DICPLACE", "DICPLACEs_PARENTID")]
        public EntityCollection<DICPLACE> DICPLACEs_PARENTID
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<DICPLACE>("SyncServicesModel.DICPLACE_DICPLACE", "DICPLACEs_PARENTID");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<DICPLACE>("SyncServicesModel.DICPLACE_DICPLACE", "DICPLACEs_PARENTID", value);
                }
            }
        }
    
        /// <summary>
        /// There are no comments for DICPLACE_PARENTID in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SyncServicesModel", "DICPLACE_DICPLACE", "DICPLACE_PARENTID")]
        public DICPLACE DICPLACE_PARENTID
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<DICPLACE>("SyncServicesModel.DICPLACE_DICPLACE", "DICPLACE_PARENTID").Value;
            }
            set
            {
                ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<DICPLACE>("SyncServicesModel.DICPLACE_DICPLACE", "DICPLACE_PARENTID").Value = value;
            }
        }
    
        /// <summary>
        /// There are no comments for DICPLACE_PARENTID in the schema.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<DICPLACE> DICPLACE_PARENTIDReference
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<DICPLACE>("SyncServicesModel.DICPLACE_DICPLACE", "DICPLACE_PARENTID");
            }
            set
            {
                if (value != null)
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<DICPLACE>("SyncServicesModel.DICPLACE_DICPLACE", "DICPLACE_PARENTID", value);
                }
                else 
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<DICPLACE>("SyncServicesModel.DICPLACE_DICPLACE", "DICPLACE_PARENTID").Value = null;
                }
            }
        }

        #endregion
    }
    #endregion

    #endregion
}
